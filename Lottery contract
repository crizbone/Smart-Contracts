// SPDX-License-Identifier :GPL-3.0
pragma solidity >=0.5.0 <0.9.0;
contract lottery{
address payable [] players;
address public manager;
constructor(){
    manager =msg.sender;
}
    
receive() payable external{
require(msg.value == 0.1 ether);
require (msg.sender!= manager);
players.push(payable(msg.sender));
}
function getBalance() private view returns (uint){
    require (msg.sender == manager);
    return address(this).balance;
}
function random() internal view returns (uint){
    return uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp,players.length)));
}
function pickWinner() public {
    require (players.length >=3);
    uint managerFee = (getBalance()*10)/100;
    uint winnerprize = (getBalance()*90)/100;
    uint r = random();
    uint index = r % players.length;
    address payable winner;
    winner = players[index];
    winner.transfer(winnerprize);
    payable(manager).transfer(managerFee);
    players = new address payable [](0);
}
}
