/ SPDX License-Identifier :GPL3.0-or-Later

pragma solidity >=0.5.0 <0.9.0;
contract AuctionCreator{
   Auction [] public newAuction;
    function createAuction() public {
        Auction newinstance = new Auction(msg.sender);
        newAuction.push(newinstance);

    }
}
contract Auction{
    address payable public owner;
    enum State {Started, Running, Cancelled, Ended}
    State public auctionstate;
    uint StartBlock;
    uint EndBlock;
    mapping( address => uint)public bids;
    uint public HighestBindingBid;
    address payable HighestBidder;
    uint BidIncrement;
    constructor(address eoa){
        owner = payable(eoa);
        StartBlock = block.number;
        EndBlock = StartBlock + 41300;
        BidIncrement = 1000;
    }

modifier onlyOwner() {
    require (msg.sender == owner);
    _;
}
modifier notOwner(){
    require (msg.sender != owner);
    _;
}
modifier AfterStart(){
    require (block.number >= StartBlock);
    _;
}
modifier BeforeEnd (){
    require (block.number <= EndBlock);
    _;
}
function min(uint a, uint b) pure internal returns (uint){
    if(a<b){
        return a;
    } else {
        return b;
    }
}

    function cancelAuction() public onlyOwner {
     auctionstate = State.Cancelled;

 }
  function placebid() public payable notOwner AfterStart BeforeEnd{
  require(auctionstate == State.Running);
  require(msg.value >= 0.1 ether);
  uint currentBid = bids[msg.sender]+msg.value;
  require(currentBid > HighestBindingBid);
  bids[msg.sender] = currentBid;// Assigning current Bid as bids of msg.sender.
 if(currentBid <= bids[HighestBidder]){
     HighestBindingBid = min(currentBid + BidIncrement, bids[HighestBidder]);

 }else{
     HighestBindingBid = min(bids[HighestBidder]+BidIncrement, currentBid);
HighestBidder = payable(msg.sender);
 }
  }
  function finalizeAuction() public {
      require(auctionstate == State.Ended || block.number > EndBlock);
      require(msg.sender == owner || bids[msg.sender] > 0);
      address payable recipient;
      uint value;
        if (auctionstate == State.Cancelled)
            {
                 recipient = payable(msg.sender);
                 value = bids[msg.sender];
            }
         else{
                if(msg.sender == owner)
                {
                    recipient = payable(owner);
                     value = HighestBindingBid;
                } else
                   {
                     if (msg.sender == HighestBidder)
                        {
                            recipient = payable(msg.sender);
                            value =bids[HighestBidder]-HighestBindingBid;
                        }
                            else
                            {
                                recipient = payable(msg.sender);
                                    value = bids[msg.sender];
                            }
          
                    }

            }
            
            recipient.transfer(value);
            bids[recipient] = 0;
  }
  }
